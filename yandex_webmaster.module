<?php

/**
 * @defgroup yandex_webmaster Yandex.Webmaster service
 *
 * The module allows you to add many features of Yandex.Webmaster service
 * to your site.
 * 
 * http://legal.yandex.ru/webmaster_api/
 */

/**
 * @file
 * Yandex.Webmaster module that add that service to your website.
 * This file contains implementations of Drupal hook functions.
 *
 * @ingroup yandex_webmaster
 */

/**
 * Load additional functions for Yandex.Webmaster module.
 */
require_once('includes/yandex_webmaster.inc');

/**
 * Yandex.Webmaster application identification number.
 *
 * @ingroup yandex_webmaster
 */
function yandex_webmaster_client() {
  $client = new stdClass();
  $client->id = 'a55f09237acb42768e0f8b895b7c9565';
  $client->secret = '6f4f08bed56a4bf9b3fd2bf72c4250da';
  return $client;
}

/**
 * Implements hook_menu().
 */
function yandex_webmaster_menu() {
  $items = array();

  // Yandex.Webmaster reports.
  $items['admin/reports/yandex_webmaster/%yandex_webmaster_host_id'] = array(
    'title' => 'Yandex.Webmaster',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('yandex_webmaster_report_form'),
    'access arguments' => array('yandex_webmaster view report'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/yandex_webmaster.report.inc',
  );
  $items['admin/reports/yandex_webmaster/%yandex_webmaster_host_id/summary'] = array(
    'title' => 'Yandex.Webmaster summary',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('yandex_webmaster_report_form'),
    'access arguments' => array('yandex_webmaster view report'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/yandex_webmaster.report.inc',
    'weight' => 0,
  );
  $items['admin/reports/yandex_webmaster/%yandex_webmaster_host_id/top'] = array(
    'title' => 'Top queries',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('yandex_webmaster_report_top_form'),
    'access arguments' => array('yandex_webmaster view report'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/yandex_webmaster.report.inc',
    'weight' => 1,
  );
  $items['admin/reports/yandex_webmaster/%yandex_webmaster_host_id/last'] = array(
    'title' => 'Last index',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('yandex_webmaster_report_last_form'),
    'access arguments' => array('yandex_webmaster view report'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/yandex_webmaster.report.inc',
    'weight' => 2,
  );
  $items['admin/reports/yandex_webmaster/%yandex_webmaster_host_id/errors'] = array(
    'title' => 'Excluded pages',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('yandex_webmaster_report_excluded_form'),
    'access arguments' => array('yandex_webmaster view report'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/yandex_webmaster.report.inc',
    'weight' => 3,
  );
  $items['admin/reports/yandex_webmaster/%yandex_webmaster_host_id/links'] = array(
    'title' => 'External links',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('yandex_webmaster_report_links_form'),
    'access arguments' => array('yandex_webmaster view report'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/yandex_webmaster.report.inc',
    'weight' => 4,
  );

  // Yandex.Webmaster configuraion.
  $items['admin/config/services/yandex_webmaster'] = array(
    'title' => 'Yandex.Webmaster',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('yandex_webmaster_config_form'),
    'access arguments' => array('administer yandex_webmaster'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/yandex_webmaster.admin.inc',
  );
  $items['admin/config/yandex_webmaster/add'] = array(
    'title' => 'Yandex.Webmaster add new site',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('yandex_webmaster_add_site_form'),
    'access arguments' => array('administer yandex_webmaster'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/yandex_webmaster.admin.inc',
  );
  $items['admin/config/yandex_webmaster/remove'] = array(
    'title' => 'Yandex.Webmaster remove site',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('yandex_webmaster_remove_site_form'),
    'access arguments' => array('administer yandex_webmaster'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/yandex_webmaster.admin.inc',
  );
  return $items;
}


function yandex_webmaster_host_id_to_arg($arg) {
  return (empty($arg) || $arg == '%') ? variable_get('yandex_webmaster_basic_host_id', '') : $arg;
}

/**
 * Implements hook_permission().
 */
function yandex_webmaster_permission() {
  return array(
    'administer yandex_webmaster' => array(
      'title' => t('Administer Yandex.Webmaster.'),
      'description' => t('Allows a user to configure Yandex.Webmaster service.'),
    ),
    'yandex_webmaster view report' => array(
      'title' => t('View Yandex.Webmaster reports.'),
      'description' => t('Allows a user to view Yandex.Webmaster service reports.'),
    ),
  );
}

/**
 * Implements hook_cron().
 */
function yandex_webmaster_cron() {
  // Check access token for expiration.
  yandex_webmaster_check_token_expiration();
  // Check for viruses.
  $hosts = yandex_webmaster_get_hosts();
  foreach ($hosts as $item) {
    if ($item['url-count'] > 0 && $item['virused'] != 'false') {
      drupal_set_message(t('Danger! Site "@site" is virused!', array('@site' => $item['name'])), 'error');
    }
  }
  // Update site statistics.
  $hostlist = yandex_webmaster_get_hosts();
  yandex_webmaster_update_stats($hostlist);
}

/**
 * Implements hook_preprocess_html().
 *
 * Add Yandex verification meta tag.
 */
function yandex_webmaster_preprocess_html(&$elements) {
  if (drupal_is_front_page() && variable_get('yandex_webmaster_verification_type', '') == 'META_TAG') {
    if (variable_get('yandex_webmaster_basic_host_id', 0) > 0) {
      $uin = variable_get('yandex_webmaster_uin', '');
      $element = array(
        '#tag' => 'meta',
        '#attributes' => array(
          'name' => 'yandex-verification',
          'content' => check_plain($uin),
        ),
      );
      drupal_add_html_head($element, 'yandex-verification');
    }
  }
}

/**
 * Implements hook_block_info().
 */
function yandex_webmaster_block_info() {
  $blocks = array();
  if (variable_get('yandex_webmaster_block_enabled', TRUE)) {
    $blocks['webmaster']['info'] = 'Yandex.Webmaster';
    $blocks['webmaster']['properties']['administrative'] = TRUE;
  }
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function yandex_webmaster_block_configure($delta = '') {
  // Let's use settings array to reduce count of queries to the database.
  $settings = variable_get('yandex_webmaster_block_settings', array(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE));
  $form['yandex'] = array(
    '#type' => 'fieldset',
    '#title' => t('Yandex.Webmaster settings'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['yandex']['branding'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display Yandex branding in the block.'),
    '#default_value' => $settings[0],
  );
  $form['yandex']['date_format'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use interval to display last index date.'),
    '#default_value' => $settings[1],
    '#suffix' => '<hr />',
  );
  $form['yandex']['hostname'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display hostname.'),
    '#default_value' => $settings[2],
  );
  $form['yandex']['last_access'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display last access date.'),
    '#default_value' => $settings[3],
  );
  $form['yandex']['tcy'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display TCY value.'),
    '#default_value' => $settings[4],
  );
  $form['yandex']['url_count'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display URL count.'),
    '#default_value' => $settings[5],
  );
  $form['yandex']['index_count'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display index count.'),
    '#default_value' => $settings[6],
  );
  $form['yandex']['url_errors'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display url errors count.'),
    '#default_value' => $settings[7],
  );
  $form['yandex']['links_count'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display links count.'),
    '#default_value' => $settings[8],
  );
  $form['yandex']['internal_links_count'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display internal links count.'),
    '#default_value' => $settings[9],
  );
  return $form;
}

/**
 * Implements hook_block_save().
 */
function yandex_webmaster_block_save($delta = '', $edit = array()) {
  variable_set('yandex_webmaster_block_settings', array(
    (bool) $edit['branding'],
    (bool) $edit['date_format'],
    (bool) $edit['hostname'],
    (bool) $edit['last_access'],
    (bool) $edit['tcy'],
    (bool) $edit['url_count'],
    (bool) $edit['index_count'],
    (bool) $edit['url_errors'],
    (bool) $edit['links_count'],
    (bool) $edit['internal_links_count'],
  ));
}

/**
 * Implements hook_block_view().
 *
 * Display "Yandex.Webmaster" statistics block.
 */
function yandex_webmaster_block_view($delta = '') {
  $block = array();
  if (!variable_get('yandex_webmaster_block_enabled', TRUE)) {
    return $block;
  }

  drupal_add_css(drupal_get_path('module', 'yandex_webmaster') . '/yandex_webmaster.css');
  $settings = variable_get('yandex_webmaster_block_settings', array(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE));

  $stats = yandex_webmaster_get_host_stats();
  if (count($stats) < 3) {
    $output = isset($stats['error']) ? $stats['error'] : t('An error has occurred.');
  }
  else {
    // Select CSS classes for the block.
    $virused = $stats['virused'] == 'false' ? '' : ' VIRUSED';
    $class = $stats['verification'] . ' ' . $stats['crawling'] . $virused;
    $output = '<div class="yandex-webmaster-stats ' . $class . '">';
    // Display security status message.
    if ($stats['virused'] != 'false') {
      $output .= '<div class="virused-site">' . t('Danger! Site is virused!') . '</div>';
    }
    // Display hostname.
    if ($settings[2]) {
      $output .= '<div class="hostname">' . t('Host name') . ': <span>' . $stats['name'] . '</span></div>';
    }
    // Display last access date.
    if ($settings[3]) {
      $date = $stats['last-access'];
      if ($date > 0) {
        // Use date format or interval.
        if ($settings[1]) {
          $date = t('@time ago', array('@time' => format_interval(time() - $date)));
        }
        else {
          $date = format_date($date);
        }
      }
      $output .= '<div class="last-access">' . t('Last access') . ': <span>' . $date . '</span></div>';
    }
    // Display TCY value.
    if ($settings[4] && $stats['tcy'] > 0) {
      $output .= '<div class="tcy">' . t('TCY') . ': <span>' . number_format($stats['tcy'], 0, '', ' ') . '</span></div>';
    }
    // Display url count.
    if ($settings[5] && $stats['url-count'] > 0) {
      $output .= '<div class="url-count">' . t('URL count') . ': <span>' . number_format($stats['url-count'], 0, '', ' ') . '</span></div>';
    }
    // Display index count.
    if ($settings[6] && $stats['index-count'] > 0) {
      $output .= '<div class="index-count">' . t('Index count') . ': <span>' . number_format($stats['index-count'], 0, '', ' ') . '</span></div>';
    }
    // Display url errors count.
    if ($settings[7] && $stats['url-errors'] > 0) {
      $output .= '<div class="url-errors">' . t('URL errors') . ': <span>' . number_format($stats['url-errors'], 0, '', ' ') . '</span></div>';
    }
    // Display links count.
    if ($settings[8] && $stats['links-count'] > 0) {
      $output .= '<div class="links-count">' . t('Links count') . ': <span>' . number_format($stats['links-count'], 0, '', ' ') . '</span></div>';
    }
    // Display internal links count.
    if ($settings[9] && $stats['internal-links-count'] > 0) {
      $output .= '<div class="internal-links-count">' . t('Internal links') . ': <span>' . number_format($stats['internal-links-count'], 0, '', ' ') . '</span></div>';
    }
    // Display Yandex branding.
    global $language;
    if ($settings[0]) {
      $output .= '<div class="branding branding-' . $language->language . '">' . t('Data provided by !link service.', array('!link' => l(t('Yandex.Webmaster'), 'http://webmaster.yandex.com/'))) . '</div>';
    }
  }

  $block['subject'] = 'Yandex.Webmaster';
  $block['content'] = $output;
  return $block;
}
